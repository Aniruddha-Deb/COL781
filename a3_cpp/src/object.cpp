#include "object.hpp"
#include "iostream"

// autogenerated with claude

// Sphere implementation
Sphere::Sphere(glm::vec3 _c, float _r) : center(_c), radius(_r)
{
}

bool Sphere::hit(const Ray& ray, float t_min, float t_max, HitRecord& rec) const
{
    glm::vec3 oc = ray.o - center;
    float a = glm::dot(ray.d, ray.d);
    float b = 2.0f * glm::dot(oc, ray.d);
    float c = glm::dot(oc, oc) - radius * radius;
    float discriminant = b * b - 4 * a * c;
    if (discriminant < 0)
        return false;
    float sqrt_discriminant = sqrt(discriminant);
    float root = (-b - sqrt_discriminant) / (2.0f * a);
    if (root < t_min || root > t_max)
    {
        root = (-b + sqrt_discriminant) / (2.0f * a);
        if (root < t_min || root > t_max)
            return false;
    }
    // std::cout << a * root * root + b * root + c << "\n";
    rec.pos = ray.o + root * ray.d;
    rec.normal = (rec.pos - center) / radius;
    // std::cout << glm::length(rec.pos - center) << " " << radius << "\n";
    // std::cout << rec.normal[0] << " " << rec.normal[1] << " " << rec.normal[2] << "\n";
    return true;
}

Box Sphere::bounding_box()
{
    Box box;
    box.tl = center - glm::vec3(radius, radius, radius);
    box.br = center + glm::vec3(radius, radius, radius);
    return box;
}

void Sphere::transform(const glm::mat4x4& M)
{
    // Apply the transformation matrix to the center and radius
    glm::vec4 center_homo = M * glm::vec4(center, 1.0f);
    center = glm::vec3(center_homo) / center_homo.w;
    // Calculate the new radius by transforming a point on the sphere
    glm::vec4 point = M * glm::vec4(center + glm::vec3(radius, 0, 0), 1.0f);
    radius = glm::length(glm::vec3(point) / point.w - center);
}

// Plane implementation
Plane::Plane(glm::vec3& _n, glm::vec3& _pt) : n(_n), pt(_pt)
{
}

bool Plane::hit(const Ray& ray, float t_min, float t_max, HitRecord& rec) const
{
    float denom = glm::dot(n, ray.d);
    if (abs(denom) < 1e-8)
        return false;
    float t = glm::dot(pt - ray.o, n) / denom;
    if (t < t_min || t > t_max)
        return false;
    rec.pos = ray.o + t * ray.d;
    rec.normal = n;
    return true;
}

Box Plane::bounding_box()
{
    Box box;
    // Assume the plane is infinite, so return a large bounding box
    box.tl = glm::vec3(-1e9, -1e9, -1e9);
    box.br = glm::vec3(1e9, 1e9, 1e9);
    return box;
}

void Plane::transform(const glm::mat4x4& M)
{
    // Apply the transformation matrix to the normal and point
    glm::vec4 normal = M * glm::vec4(n, 0.0f);
    n = glm::vec3(normal);
    glm::vec4 point = M * glm::vec4(pt, 1.0f);
    pt = glm::vec3(point) / point.w;
}

// Triangle implementation
Triangle::Triangle(glm::vec3& _p0, glm::vec3& _p1, glm::vec3& _p2) : p0(_p0), p1(_p1), p2(_p2)
{
}

bool Triangle::hit(const Ray& ray, float t_min, float t_max, HitRecord& rec) const
{
    glm::vec3 e1 = p1 - p0;
    glm::vec3 e2 = p2 - p0;
    glm::vec3 pvec = glm::cross(ray.d, e2);
    float det = glm::dot(e1, pvec);
    if (det < 1e-8 && det > -1e-8)
        return false;
    float inv_det = 1.0f / det;
    glm::vec3 tvec = ray.o - p0;
    float u = glm::dot(tvec, pvec) * inv_det;
    if (u < 0.0f || u > 1.0f)
        return false;
    glm::vec3 qvec = glm::cross(tvec, e1);
    float v = glm::dot(ray.d, qvec) * inv_det;
    if (v < 0.0f || u + v > 1.0f)
        return false;
    float t = glm::dot(e2, qvec) * inv_det;
    if (t < t_min || t > t_max)
        return false;
    rec.pos = ray.o + t * ray.d;
    rec.normal = glm::normalize(glm::cross(e1, e2));
    return true;
}

Box Triangle::bounding_box()
{
    Box box;
    box.tl = glm::min(glm::min(p0, p1), p2);
    box.br = glm::max(glm::max(p0, p1), p2);
    return box;
}

void Triangle::transform(const glm::mat4x4& M)
{
    // Apply the transformation matrix to the vertices
    glm::vec4 v0 = M * glm::vec4(p0, 1.0f);
    p0 = glm::vec3(v0) / v0.w;
    glm::vec4 v1 = M * glm::vec4(p1, 1.0f);
    p1 = glm::vec3(v1) / v1.w;
    glm::vec4 v2 = M * glm::vec4(p2, 1.0f);
    p2 = glm::vec3(v2) / v2.w;
}
